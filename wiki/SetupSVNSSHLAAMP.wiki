#summary Some documentation on how to setup a development server like ours from "scratch"
= Setting up an SVN+SSH and Linux/Asterisk/Apache/Mysql/Php server =

*Contents*
<wiki:toc max_depth="5" />

= Note: This page is WIP + discovery don't take it as sure information =

== Introduction ==

We hope through this documentation to give you more input on setting up [DevelopmentToolsDeployment our development server].
We have wanted this article to be simple and fast.

A summary of the technologies involved are: *Ubuntu/Debian Linux, svn+ssh, Apache2+MySQL+PHP, Asterisk.*

In our situation, we wanted to have both Apache2 and Asterisk's config files & contents folders to be versioned over svn.
Thus everytime a change is committed onto the server, we can 1) restart the server if necessary, 2) interact with it over HTTP or VoIP (ie. browse the server's web pages / make a phone call to it).


The ssh part in the svn+ssh was necessary because we had to cross our university proxy to reach our server locate in some room there and adding an ssh+ part to svn would make our connection flow through flawlessly instead of regular svn:// (on port 3690).
Svn+ssh is special because it virtually logs you into a shell onto on the remote svn server and fetches/interacts with files from there.
This implies that the users created for svn+ssh should be real users of the system (with linux/unix accounts created on the server).


== Install SVN and the OpenSSH server if not present ==

What we are doing here is actually what [http://svn.haxx.se/dev/archive-2004-03 /0253.shtml Gunther Strube's post] proposes for usual SVN+SSH setups except that you will have a bit more details here, the setup used here assumes that you don't want to put your respositories elsewhere than in an not-to-long absolute path like /svn/ to as to skip the redirection option `-r` to pass to svnserve.

=== Installing the OpenSSH server ===
For our server we used an Ubuntu 8.04 regular CD which only installed the SSH client and not the server. You may not have to do this on Ubuntu Server for example.

Test if the Openssh server is installed:

`which sshd`

should output something like:

`/usr/sbin/sshd`


You just need to install the Openssh server. Unless you use some graphical front-end to the apt system such as Synaptic Package Manager or Adept on KDE, you could type:

`sudo apt-get install openssh-server`

Once installed, see if it's running yet:

`pstree | grep sshd`

if you see ssh there, the ssh daemon (server) is running. Else start it:

`sudo /etc/init.d/sshd start`

Have try logging into your computer through ssh to test that, type your usual machine login password if prompted:

`ssh localhost`

*_note:_* another way to do that is to do ssh yourUserName@localhost ... Here it will use your current username (type `who` to know it).

You have a new shell running which looks like your previous one though it is piped through an SSH connection. To get out of that shell, press _Ctrl+D_ once.

=== Installing SVN ===

As before, check if svn is installed:
`which svn`

should output something like:

`/usr/bin/svn`

If not, install svn:
`sudo apt-get install svn`, replacing svn by subversion if you have no result.

And now we have all the needed software for an SVN+SSH server.

== Add users into an linux user group, create repositories, set up SVN users access ==

=== Adding new Linux users into a new svn-specific linux user group ===
Before touching the actual SVN part, we'll create a few linux users who will be able to:
  * ssh into the server with their linux username and password
  * contribute to the project repositories hosted on the server (SVN read/writing) over svn+ssh with their linux username and password
  * optionally have a /home/theirname directory and do sudo actions (this sudo thing is Ubuntu-default).

For this we'll namely use adduser which takes you into a simple wizard. After that wizard, a folder with the entered new username will be created inside the /home folder (ie /home/newloginforthisuser/) copying the contents from the template folder /etc/skel.


1. Create a linux user group named "svn" (or whatever you want) that'll be helpful for repository access setting & synchronisation later.
{{{
sudo addgroup svn`
}}}

2. Create one or more (type the command several times) unix users with no specific rights on your server:
{{{
sudo adduser newloginforthisuser svn #add a user and put it into the svn group directly
}}}
*note:* other ways to add users to a group are:
  * with `vigr` or `vi /etc/group` by appending your developers' usernames to the line starting with the group name you want.
  * with `usermod -a -G aGroupName usernameToAddToGroup` (or `echo username1 username2 ... | xargs -d' ' -L 1 usermod -a -G aGroupName` to add several users to the same group in one shot)

3. this command makes you create an extra administrator if you need to..

Note that if the login name you type as a first parameter is an existing user's name, then that user will be added to the admin group making that person able to edit all your system's files as a root person.
{{{
sudo adduser newloginfortheadminuser admin
}}}

By default, the users created with minimum rights (from 1)) shall not be able to read/touch other users' files.

In then end you can see who's in the admin and svn groups by typing: `cat /etc/group | grep -wE "svn|admin"`

=== Creating repositories spaces locally ===
To have a repository path from outside looking like `svn+ssh://serverAdress/svn/projectname` and so without setting up URL rewriting, the easiest is to do the following as a root user:

  # create a folder named _svn_ in your root folder: `mkdir /svn`. This will be the folder to contain one more project repositories.
  # make svn create a repository in that folder: `svnadmin create /svn/myprojectname`
You can list the new repository folder to ensure `svnadmin` has done its job:
{{{
$ ls /svn/myprojectname
conf  dav  db  format  hooks  locks  README.txt
}}}

=== Setting up repository users access ===
Now we should edit our create repository's folder to setup user rights.
What is cool with the SVN+SSH way of accessing a repository is that from the moment users have a (linux) user account on the machine, they just need to have that same username written in a repository's config file to be able to access that repository.

Edit your newly created repository's config file:
{{{
$ cd /svn/myprojectname/conf/
}}}

In the files there, we have `passwd` which lets you set custom password for svn users who probably are not unix users on your machine, and `authz` allowing you to set permissions for users created (whether it be for accounts defined within `passwd` or for existing linux user accounts from the machine).

In our case, it is simpler to say that we want to reuse the linux user accounts from the machine, so we edit only `authz` for our setup.
{{{
$ ls
authz  passwd  svnserve.conf
$ vi authz #you can use nano, emacs, mcedit or a graphical text editor for example
}}}

Modify the file to have something like:
{{{
[groups]
someGroupName = linux,usernames,of,your,developers

[/]
* = r
@someGroupName = rw
}}}
Note that we had a linux group named `svn` and that reusing that name in the `authz` file will not (obviously per our tests...) make svnserve understand that all users in the linux `svn` user group will have SVN r/w rights. This is why we have written `someGroupName` here instead, which will have a meaning only for svn and in some way is unimportant, and also why we have added all of our people's username again.
All in all, for an svn+ssh setup, we can say that SVN seems to be aware of the linux usernames, but not of linux user group names.

=== Putting the right permissions to your repository ===
TODO : We are not sure of this !
All your developers are in a same `svn` linux group.

In order for them to be able to read/write into the repository (checking out and updating should be ok, but commiting will give permissions errors without that), you need to grant access to both root and your svn-specific user group recursively (on all the file & folders hierarchy of your repository):
{{{
chown -R root.svn /svn/myprojectname #where svn is your linux user group name for svn
                                     #which we created at the beginning
find /svn/myprojectname -type d | xargs chmod -R u+rwx,g+rwx,o-rwx #makes the folders read/write/executable by root and your developers' group
find /svn/myprojectname -type f | xargs chmod -R u+rw,g+rw,o-rwx #makes all your files read/writeable by root and your developers' group.
}}}

=== Adding umask 002 to all your users .bashrc to preserve permissions&ownership ===
This is necessary so that everytime a user acts upon the server (read/write) over svn+ssh, the permissions and ownerships of the repositories files remain unchanged.

For all of the developers which you've added to the repository as read/writers, edit their `/home/developerName/.bashrc` file adding `umask 002` inside it if not present. For info, the default umask is 022 usually.

A quick way is with file redirection:
{{{
echo "umask 002" >> ~someUserName/.bashrc
}}}
The first two zeros in `002` make that when new files are created they'll have the rights 666-002 => 664 => rw-rw-r. (From "what the web says", for directories and executables the calculation should take 777 instead of 666).

So if we remember our `chown` and `chmod` operations in the last paragraph, for text files... user (root) will be able to: read-write, group (svn/the developers group) to read-write and others only to read.

=== Rapid local testing of the SVN server ===

You should have a working svn+ssh repository now.
Test it like so:
{{{
#on the same machine as the create repository
# log into a developer's linux account because he/she'll have svn read/write rights
$ su someDeveloperUserName
#type a password here probably
# go to your home
$ cd
# create a folder for our checkout (creation of a working with the same contents are our svn server)
$ mkdir svnsshtest
# go into that folder
$ cd svnsshtest

# checkout your project's repository
# since we're doing svn+ssh, there's first an SSH action using your own linux username (the "someDeveloperUserName" above), and then an svn action "through this connection" (obviously made locally on the machine)
$ svn checkout svn+ssh://localhost/svn/myprojectname
# type your regular linux password for account "someDeveloperUserName"
# you should read "At revision 0." or something similar

# now let's test svn committing
# create some file
$ echo "text" > myFile
# ask svn to take the latter into account for existence in the repository/versioning
$ svn add myFile
# send all the changes (roughly just a file add) to the server
$ svn commit
#you should read "A myFile"("A" at the beginning stands for an "Add") and below probably "At revision 1." or something similar

# just to show that reading from the remote server does work (we've tested it with the checkout someway...)
$ svn update
# you get something like "At revision 1."
}}}

== Magic python script for quick SVN repository creation ==
Assuming you have created a linux user group and have added your developers linux users into it (this is what is done in [http://code.google.com/p/audiospread/w/edit.do#Adding_new_Linux_users_into_a_new_svn-specific_linux_user_group this paragraph]), the script below:
  # creates a repo named how you want inside /svn/ (edit the script to change that...)
  # adds your developers' as r/w in the repo's ./conf/authz file so they can read/write from/to your project's repo over at least svn+ssh.
  # changes the repository's permissions with chown appropriately.
  # tests the repo for you on the local machine in your own /home/yourusername/svnRepoTestNNN folder. (N is random)

[http://someurl.com Download the script here]. We release it as public domain.

== for later ==
(custom pastebin for later user...)
There is no need to create Linux user accounts for making VoIP phone calls to the server (connection to the Asterisk server on port 5690) and viewing its web pages (connection to the Apache server on port 80 (HTTP)). The logins we create there are for people that will contribute code directly to SVN.