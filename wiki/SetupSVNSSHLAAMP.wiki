#summary Some documentation on how to setup a development server like ours from "scratch"

= Setting up an SVN+SSH and Linux/Asterisk/Apache/Mysql/Php server =

== Introduction ==

We hope through this documentation to give you more input on setting up [DevelopmentToolsDeployment our development server].
We have wanted this article to be simple and fast.

A summary of the technologies involved are: *Ubuntu/Debian Linux, svn+ssh, Apache2+MySQL+PHP, Asterisk.*

In our situation, we wanted to have both Apache2 and Asterisk's config files & contents folders to be versioned over svn.
Thus everytime a change is committed onto the server, we can 1) restart the server if necessary, 2) interact with it over HTTP or VoIP (ie. browse the server's web pages / make a phone call to it).


The ssh part in the svn+ssh was necessary because we had to cross our university proxy to reach our server locate in some room there and adding an ssh+ part to svn would make our connection flow through flawlessly instead of regular svn:// (on port 3690).
Svn+ssh is special because it virtually logs you into a shell onto on the remote svn server and fetches/interacts with files from there.
This implies that the users created for svn+ssh should be real users of the system (with linux/unix accounts created on the server).


== Install SVN and the OpenSSH server if not present ==

=== OpenSSH server ===
For our server we used an Ubuntu 8.04 regular CD which only installed the SSH client and not the server. You may not have to do this on Ubuntu Server for example.

Test if the Openssh server is installed:

`which sshd`

should output something like:

`/usr/sbin/sshd`


You just need to install the Openssh server. Unless you use some graphical front-end to the apt system such as Synaptic Package Manager or Adept on KDE, you could type:

`sudo apt-get install openssh-server`

Once installed, see if it's running yet:

`pstree | grep sshd`

if you see ssh there, the ssh daemon (server) is running. Else start it:

`sudo /etc/init.d/sshd start`

Have try logging into your computer through ssh to test that, type your usual machine login password if prompted:

`ssh localhost`

*_note:_* another way to do that is to do ssh yourUserName@localhost ... Here it will use your current username (type `who` to know it).

You have a new shell running which looks like your previous one though it is piped through an SSH connection. To get out of that shell, press _Ctrl+D_ once.

=== SVN ===

As before, check if svn is installed:
`which svn`

should output something like:

`/usr/bin/svn`

If not, install svn:
`sudo apt-get install svn`, replacing svn by subversion if you have no result.

And now we have all the needed software for an SVN+SSH server.

== Add users, create repositories, set up SVN users access ==

=== Adding new Linux users ===
Before touching the actual SVN part, we'll create a few users who will be able to:
  * administer the Linux server remotely with the same rights as root/admin
  * fiddle what they want in their /home/theirUserName directory
  * contribute to the project (SVN read/writing) to the repository
  * view the project's code (SVN reading)

For this we'll namely use adduser which takes you into a simple wizard. After that wizard, a folder with the entered new username will be created inside the /home folder (ie /home/newloginforthisuser/) copying the contents from the template folder /etc/skel.

There is no need to create Linux user accounts for making VoIP phone calls to the server (connection to the Asterisk server on port 5690) and viewing its web pages (connection to the Apache server on port 80 (HTTP)). The logins we create there are for people that will contribute code directly to SVN.

1. Create a linux user group named "svn" (or whatever you want) that'll be helpful for repository access setting & synchronisation later.
  # `sudo addgroup svn`
2. Create one or more (type the command several times) unix users with no specific rights on your server:
  # `sudo adduser newloginforthisuser svn #add a user and put it into the svn group directly`
3. this command makes you create an extra administrator if you need to.. Note that if the login name you type as a first parameter is an existing user's name, then that user will be added to the admin group making that person able to edit all your system's files as a root person.
  # `sudo adduser newloginfortheadminuser admin`

By default, the users created with minimum rights (from 1)) shall not be able to read/touch other users' files.

In then end you can see who's in the admin and svn groups by typing: `cat /etc/group | grep -wE "svn|admin"`

=== Creating repositories spaces locally ===
To have a repository path from outside looking like `svn+ssh://serverAdress/svn/projectname` and so without setting up URL rewriting, the easiest is to do the following as a root user:

  # create a folder named _svn_ in your root folder: `mkdir /svn`. This will be the folder to contain one more project repositories.
  # make svn create a repository in that folder: `svnadmin create /svn/myprojectname`
You can list the new repository folder to ensure `svnadmin` has done its job:
{{{
$ ls /svn/myprojectname
conf  dav  db  format  hooks  locks  README.txt
}}}

=== Setting up repository access for SVN+SSH ===
Now we should edit our create repository's folder to setup user rights.
What is cool with the SVN+SSH way of accessing a repository is that from the moment users have a (linux) user account on the machine, they just need to have that same username written in a repository's config file to be able to access that repository.
Edit your newly created repository's config file:
{{{
$ cd /svn/myprojectname/conf/
}}}
In the files there, we have `passwd` which lets you set custom password for svn users who probably are not unix users on your machine, and `authz` allowing you to set permissions for users created (whether it be for accounts defined within `passwd` or for existing linux user accounts from the machine).
In our case, it is simpler to say that we want to reuse the linux user accounts from the machine, so we edit `authz` right away.
{{{
$ ls
authz  passwd  svnserve.conf
$ vi authz #you can use nano, emacs, mcedit or a graphical text editor for example
}}}
Starting from that file:
{{{
#----lots of comments before here---
[groups]
# harry_and_sally = harry,sally

# [/foo/bar]
# harry = rw
# * =

# [repository:/baz/fuz]
# @harry_and_sally = rw
# * = r
}}}
Remember from the last part that we have created a group named "svn" ?
Now let's give permissions for that group. In the authz file, add the following section (everything else can be deleted or be left commented) which gives the unix group svn read and write access to the repository myprojectname we just created:
{{{
[/svn/myprojectname/]
svn = rw
}}}
